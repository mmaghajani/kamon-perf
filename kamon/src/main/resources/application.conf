//akka {
//  loglevel = INFO
//
//  extensions = ["kamon.akka.Akka", "kamon.statsd.StatsD", "kamon.system.SystemMetrics"]
//}
//
//# Kamon Metrics
//# ~~~~~~~~~~~~~~
//
//kamon {
//
//  metric {
//
//    #sigar is enabled by default
//    sigar-enabled = true
//
//    #jmx related metrics are enabled by default
//    jmx-enabled = true
//
//    # Time interval for collecting all metrics and send the snapshots to all subscribed actors.
//    tick-interval = 1 seconds
//
//    # Disables a big error message that will be typically logged if your application wasn't started
//    # with the -javaagent:/path-to-aspectj-weaver.jar option. If you are only using KamonStandalone
//    # it might be ok for you to turn this error off.
//    disable-aspectj-weaver-missing-error = false
//
//    # Specify if entities that do not match any include/exclude filter should be tracked.
//    track-unmatched-entities = yes
//
//    //    filters {
//    //      akka-actor {
//    //        includes = ["kamontest.Main"]
//    //        excludes = [ "*/system/**", "*/user/IO-**", "*kamon*" ]
//    //      }
//    //
//    //      akka-router {
//    //        includes = ["kamontest.Main"]
//    //        excludes = []
//    //      }
//    //
//    //      akka-dispatcher {
//    //        includes = ["kamontest.Main"]
//    //        excludes = []
//    //      }
//    //
//    //      trace {
//    //        includes = [ "**" ]
//    //        excludes = [ ]
//    //      }
//    //    }
//    filters {
//      actor {
//        includes = ["*"]
//        excludes = []
//      }
//      trace {
//        includes = ["*"]
//        excludes = []
//      }
//    }
//  }
//
//  # Controls whether the AspectJ Weaver missing warning should be displayed if any Kamon module requiring AspectJ is
//  # found in the classpath but the application is started without the AspectJ Weaver.
//  show-aspectj-missing-warning = yes
//
//  statsd {
//
//    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
//    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
//    hostname = "127.0.0.1"
//    port = 8000
//
//    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
//    # kamon.metric.tick-interval setting.
//    flush-interval = 1 seconds
//
//    # Max packet size for UDP metrics data sent to StatsD.
//    max-packet-size = 1024 bytes
//
//    report-system-metrics = true
//    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
//    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
//    subscriptions {
//      histogram = ["kamontest.Main"]
//      min-max-counter = ["**"]
//      gauge = ["**"]
//      counter = ["kamontest.Main"]
//      trace = ["**"]
//      trace-segment = ["**"]
//      akka-actor = ["kamontest.Main"]
//      akka-dispatcher = ["**"]
//      akka-router = ["**"]
//      system-metric = ["kamontest.Main"]
//      http-server = ["**"]
//    }
//
//    includes {
//      actor = ["*"]
//      trace = ["*"]
//      dispatcher = ["*"]
//    }
//    # FQCN of the implementation of `kamon.statsd.MetricKeyGenerator` to be instantiated and used for assigning
//    # metric names. The implementation must have a single parameter constructor accepting a `com.typesafe.config.Config`.
//    metric-key-generator = kamon.statsd.SimpleMetricKeyGenerator
//
//    simple-metric-key-generator {
//
//      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
//      # this pattern:
//      #    application.host.entity.entity-name.metric-name
//      application = "kamon"
//
//      # Includes the name of the hostname in the generated metric. When set to false, the scheme for the metrics
//      # will look as follows:
//      #    application.entity.entity-name.metric-name
//      include-hostname = true
//
//      # Allow users to override the name of the hostname reported by kamon. When changed, the scheme for the metrics
//      # will have the following pattern:
//      #   application.hostname-override-value.entity.entity-name.metric-name
//      hostname-override = none
//
//      # When the sections that make up the metric names have special characters like dots (very common in dispatcher
//      # names) or forward slashes (all actor metrics) we need to sanitize those values before sending them to StatsD
//      # with one of the following strategies:
//      #   - normalize: changes ': ' to '-' and ' ', '/' and '.' to '_'.
//      #   - percent-encode: percent encode the section on the metric name. Please note that StatsD doesn't support
//      #     percent encoded metric names, this option is only useful if using our docker image which has a patched
//      #     version of StatsD or if you are running your own, customized version of StatsD that supports this.
//      metric-name-normalization-strategy = normalize
//    }
//  }
//
//  # modules can be disabled at startup using yes/no arguments.
//  modules {
//    kamon-log-reporter.auto-start = no
//    kamon-system-metrics.auto-start = yes
//    kamon-statsd.auto-start = yes
//    kamon-akka.auto-start = yes
//  }
//
//}

akka {
  loglevel = INFO

  extensions = ["kamon.metric.Metrics", "im.nasim.kamon.PerfReporter"]
}

# Kamon Metrics
# ~~~~~~~~~~~~~~


kamon.metric {
  filters {
    akka-actor {
      includes = [ "user/*", "user/worker-*" ]
      excludes = [ "system/*" ]
    }
    trace {
      includes = [ "**" ]
      excludes = []
    }
    akka-dispatcher {
      includes = [ "system-name/akka.actor.default-dispatcher" ]
      excludes = []
    }
  }
}

kamon {


  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  perfr {
    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = 127.0.0.1
    port = 8125

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metrics.tick-interval setting.
    flush-interval = 10 second

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    includes {
      actor       = [ "*" ]
      trace       = [ "*" ]
      dispatcher  = [ "*" ]
    }

    simple-metric-key-generator {
      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "yourapp"
    }
  }
}